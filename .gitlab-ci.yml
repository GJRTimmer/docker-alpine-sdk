stages:
  - build
  - deploy
  - clean
  
build-master:
  stage: build
  tags: 
    - shell
  script:
    - docker build --pull --force-rm=true 
        --build-arg VCS_REF=`git rev-parse --short HEAD` 
        --build-arg BUILD_DATE=`date -u +"%Y-%m-%dT%H:%M:%SZ"` 
        --tag=$(cat REPOSITORY)/${CI_PROJECT_PATH}:latest .
  only:
    - master

build-branch:
  stage: build
  tags: 
    - shell
  script:
    - docker build --pull --force-rm=true 
        --build-arg VCS_REF=`git rev-parse --short HEAD` 
        --build-arg BUILD_DATE=`date -u +"%Y-%m-%dT%H:%M:%SZ"` 
        --tag=$(cat REPOSITORY)/${CI_PROJECT_PATH}:${CI_BUILD_REF_NAME} .
  except:
    - master

deploy-master:
  stage: deploy
  tags:
    - shell
  script:
    - docker push $(cat REPOSITORY)/${CI_PROJECT_PATH}:latest
  only:
    - master
    
deploy-branch:
  stage: deploy
  tags:
    - shell
  script:
    - docker push $(cat REPOSITORY)/${CI_PROJECT_PATH}:${CI_BUILD_REF_NAME}
  except:
    - master

release:
  stage: deploy
  tags:
    - shell
  only:
    - tags
  script:
    - docker tag $(cat REPOSITORY)/${CI_PROJECT_PATH} $(cat REPOSITORY)/${CI_PROJECT_PATH}:${CI_BUILD_REF_NAME}
    - docker push $(cat REPOSITORY)/${CI_PROJECT_PATH}:${CI_BUILD_REF_NAME}
    
clean:
  stage: clean
  tags:
    - shell
  script:
    -   if [ ! -z $(docker images -q $(cat REPOSITORY)/${CI_PROJECT_PATH}) ]; then 
            docker rmi $(cat REPOSITORY)/${CI_PROJECT_PATH};
        fi
    -   if [ ! -z $(docker images -q $(cat REPOSITORY)/${CI_PROJECT_PATH}:${CI_BUILD_REF_NAME}) ]; then 
            docker rmi $(cat REPOSITORY)/${CI_PROJECT_PATH}:${CI_BUILD_REF_NAME};
        fi
